370. Module Introduction
    - Planning a Rest API
    - CRUD Opetations & End points
    - Validation
    - Image Upload
    - Authentication

371. REST APIs & The Rest Of The Course
    ? How do we adjust our knowlegde working with a Rest API instead of a view based application?

    Let's Organize all main topics we learnt (in the left as we learnt, in the right differences for Rest APIs):

        - NODE + Express App Setup      |       No Changes
        - Routing / Endpoints      |       Just more http methods
        - Handling Req & Res      |       Parse + Send JSON files (instead of views)
        - Request Validation      |       No Changes
        - DataBase Communication      |       No Changes
        - Files Uploads & Downloads      |       No real changes (Only in the client side)
        - Sessions & Cookies      |       There is no more
        - Authentication      |       A Different Authentication Approach

    - No real changes, just more http methods

    - Work with JSON data instead of Views

373. Planning the API
    - Summing up,. we just had a look at the files in th ereact app that we will need to fetch some data from the API

374. Fetching Lists of Posts
    * We just set the URL in the frontend, and set some parameters in the backend controller

375. Adding a Create Post Endpoint
    * We set some parameters to the end point, in the server and in the front end code

376. Adding Server Side Validation
    - install express-validator
        * added the validators in the feed routes
    
    ! * to check the error from the server-side, we shuld go to:
        Dev tools -> network -> look for the post data error (in red) -> Look the data (Preview, Headers adn Repsonse mainly)

377. Setting Up a Post Model
    * Let's add ome database logic

    Steps:
        1- npm isntall mongoose
        2- In the app.js, require mongoose
        3- Set the env keys with passwords
        4- mongoose.connect('url').then(app.listen(8080))
        5- Create models folder;
        6- Create our model Schema - mongoose.Schema()

        * Mongoose have some options to the schema set up, now we are using timestamps, to save the time for creation and editing of data

378. Storing Posts in the Database
    * We worked in the feed controller
        - Summing up, it's about saving in the DB, and returning the promisse value (which contains the saved object)
